#ifndef CONSTRUCTION_HH
#define CONSTRUCTION_HH

#include "G4VUserDetectorConstruction.hh"
#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4PVPlacement.hh"
#include "G4NistManager.hh"
#include "G4SystemOfUnits.hh"
#include "detector.hh"
// messenger
#include "G4GenericMessenger.hh"

class MyDetectorConstruction : public G4VUserDetectorConstruction
{
public:
    MyDetectorConstruction();
    ~MyDetectorConstruction();

    // create scoring volume to store info only for that
    G4LogicalVolume *GetScoringVolume() const { return fScoringVolume; }

    virtual G4VPhysicalVolume *Construct();
    // to access the logical volume from outside the construction function
private:
    G4LogicalVolume *logicDetector;

    // move this declaration here, so it's not created every time it's modified
    G4Box *solidWorld, *solidRadiator, *solidDetector;
    G4Tubs *solidScintillator;
    G4LogicalVolume *logicWorld, *logicRadiator, *logicScintillator;
    G4VPhysicalVolume *physWorld, *physRadiator, *physDetector, *physScintillator;

    G4Material *SiO2, *H2O, *Aerogel, *worldMat, *NaI;
    G4Element *C, *Na, *I;

    // let's put here the definition of the materials
    void
    DefineMaterials();

    // function to construct cherenkov detector
    void ConstructCherenkov();
    // function to construct scintillator cylinder detector
    void ConstructScintillator();

    virtual void ConstructSDandField();
    G4GenericMessenger *fMessenger;

    G4LogicalVolume *fScoringVolume;
    G4int nCols, nRows;
    G4double xWorld, yWorld, zWorld;
    G4bool isCherenkov, isScintillator;
};

#endif